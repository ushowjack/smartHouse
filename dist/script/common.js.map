{"version":3,"sources":["common.js"],"names":["Array","prototype","forEach","callBack","context","this","i","length","call","CookieUtil","get","name","cookieName","encodeURIComponent","cookieStart","document","cookie","indexOf","cookieEnd","cookieValue","decodeURIComponent","substring","set","_ref","value","expires","path","domain","secure","cookieText","Date","toGMTString","unset","_ref2","FormUtil","placeholderOff","ev","target","val","getAttribute","setAttribute","placeholderOn","setPlaceholder","el","onfocus","onblur"],"mappings":"AAKA,YAMAA,OAAMC,UAAUC,QAAU,SAAiBC,EAAUC,GAGjD,OAHJ,KAAMH,IAA6BC,EAAQC,QAGnC,WAAaH,OAAMC,UACnB,WADAI,MAAAH,QAAaF,EAAMC,EAKvB,KAAA,GAAAK,GAAA,EAAAA,EAAAD,KAAAE,OAAAD,IACoB,kBAAXA,IAATH,EAAsCK,KAAAJ,EAAAC,KAAAC,GAAAA,EAAAD,MAU1C,IAAII,aAMAC,IAAK,SAAUC,GAAfD,GAAKE,GAAUD,mBAAMA,GAAA,IACbC,EAAaC,SAAAA,OAAAA,QAAAD,GACbE,EAAcC,IAGlB,IAAID,GAAe,EAAG,CAAlBA,GAAAA,GAAJC,SAAsBC,OAAAC,QAAA,IAAAH,IACFC,IAAZG,IACAA,EAAAA,SAAkBF,OAAAT,QAErBY,EAAAC,mBAAAL,SAAAC,OAAAK,UAAAP,EAAAF,EAAAL,OAAAW,IAIL,MAAOC,IAWXG,IAAK,SAAAC,GAAwD,GAA7CZ,GAA6CY,EAA7CZ,KAAMa,EAAuCD,EAAvCC,MAAOC,EAAgCF,EAAhCE,QAASC,EAAuBH,EAAvBG,KAAMC,EAAiBJ,EAAjBI,OAAQC,EAASL,EAATK,OAA/CC,EAAAhB,mBAAwDF,GAAA,IAAAE,mBAAAW,EAAA,IAA7Cb,EAA6C,CAAvCa,GAAAA,GAAuCM,KAAvCN,KAAOC,GAAgC,GAAAK,MAAhCL,EAAgC,MAAAA,GAAjBE,YAAAA,QAAQC,GAAAA,aAASH,EAAAM,eACrDF,IACAJ,GAAS,UAAAC,GAETD,IACHI,GAAA,YAAAF,GAEGE,IACHA,GAAA,YAEGA,SAAAA,OAAcA,GASrBG,MAjDY,SAAAC,GAAA,GAAAtB,GAAAsB,EAAAtB,KAAAe,EAAAO,EAAAP,KAAAC,EAAAM,EAAAN,OAAAC,EAAAK,EAAAL,MAkDbvB,MAAAiB,KAAAX,KAAAA,EAAAa,MAAA,GAAAE,KAAAA,EAAAC,OAAAA,EAAAC,OAAAA,MAO+CM,UAzDnDC,eAAA,SAAAC,GA0EQA,EAAGC,OAAOC,IAAMF,EAAGC,OAAOE,aAAa,eAZ/CH,EAAAC,OAAAG,aAAA,cAAA,KAeIC,cAAe,SAAUL,GACrBA,EAAGC,OAAOG,aAAa,cAAcJ,EAAGC,OAAOC,MAXnDI,eAAA,SAAAC,GAcIA,EAAGC,QAAUV,SAASC,eACtBQ,EAAGE,OAASX,SAASO","file":"common.js","sourcesContent":["/**\r\n * User: Ushow Jack/youshoujie@tomee.cn\r\n * Date: 2017/4/11\r\n * Time: 16:04\r\n */\r\n\"use strict\"\r\n/**\r\n * 处理forEach兼容性问题\r\n * @param callBack\r\n * @param context\r\n */\r\nArray.prototype.forEach = function forEach(callBack, context) {\r\n    typeof context === \"undefined\" ? context = window : null;\r\n\r\n    if (\"forEach\" in Array.prototype) {\r\n        this.forEach(callBack, context);\r\n        return;\r\n    }\r\n\r\n    //->不兼容处理\r\n    for (var i = 0; i < this.length; i++) {\r\n        typeof callBack === \"function\" ? callBack.call(context, this[i], i, this) : null;\r\n    }\r\n};\r\n\r\n/**\r\n *  * 来源：JavaScript高级程序设计，由Ushow改写\r\n * @type {{get: CookieUtil.get, set: CookieUtil.set, unset: CookieUtil.unset}}\r\n * @version 1.0\r\n */\r\nlet CookieUtil = {\r\n    /**\r\n     * 获取cookie值\r\n     * @param name {string}\r\n     * @returns {strung} 返回对应的值\r\n     */\r\n    get: function (name) {\r\n        let cookieName = encodeURIComponent(name) + \"=\",\r\n            cookieStart = document.cookie.indexOf(cookieName),\r\n            cookieValue = null;\r\n\r\n        if (cookieStart > -1) {\r\n            let cookieEnd = document.cookie.indexOf(\";\", cookieStart);\r\n            if (cookieEnd === -1) {\r\n                cookieEnd = document.cookie.length;\r\n            }\r\n            cookieValue = decodeURIComponent(document.cookie.substring(cookieStart + cookieName.length, cookieEnd));\r\n        }\r\n\r\n        return cookieValue;\r\n    },\r\n    /**\r\n     * 写入cookie方法\r\n     * @param name{string}          键名\r\n     * @param value{string/num}     键值\r\n     * @param expires{int}          有效天数（默认浏览器关闭后清除）\r\n     * @param path{string}          路径\r\n     * @param domain{string}        域名（默认当前域名）\r\n     * @param secure{boolean}       安全\r\n     */\r\n    set: function ({name, value, expires, path, domain, secure}) {\r\n        let cookieText = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\r\n        if (expires) {\r\n            let now = Date.now();\r\n            expires = new Date(now + expires * 86400000);\r\n        }\r\n        if (expires instanceof Date) {\r\n            cookieText += \"; expires=\" + expires.toGMTString();\r\n        }\r\n        if (path) {\r\n            cookieText += \"; path=\" + path;\r\n        }\r\n        if (domain) {\r\n            cookieText += \"; domain=\" + domain;\r\n        }\r\n        if (secure) {\r\n            cookieText += \"; secure\";\r\n        }\r\n        document.cookie = cookieText;\r\n    },\r\n    /**\r\n     * 覆盖cookie函数\r\n     * @param name{string}          键名\r\n     * @param path{string}          路径\r\n     * @param domain{string}        域名（默认当前域名）\r\n     * @param secure{boolean}       安全\r\n     */\r\n    unset: function ({name, path, domain, secure}) {\r\n        this.set({name: name, value: \"\", path: path, domain: domain, secure: secure});\r\n    }\r\n}\r\n\r\n/**\r\n * 表单方法集合\r\n * @type {{placeholderOff: FormUtil.placeholderOff, placeholderOn: FormUtil.placeholderOn}}\r\n */\r\nlet FormUtil = {\r\n    /**\r\n     * 用于绑定input的placeholder事件\r\n     * @example inputElem.forEach(FormUtil.setPlaceholder)\r\n     * @param el {DOM对象}\r\n     * @version 1.0\r\n     */\r\n    placeholderOff: function (ev) {\r\n        ev.target.val = ev.target.getAttribute(\"placeholder\");\r\n        ev.target.setAttribute(\"placeholder\",\"\");\r\n    },\r\n    placeholderOn: function (ev) {\r\n        ev.target.setAttribute(\"placeholder\",ev.target.val );\r\n    },\r\n    setPlaceholder: function (el) {\r\n        el.onfocus = FormUtil.placeholderOff;\r\n        el.onblur = FormUtil.placeholderOn;\r\n    }\r\n}"]}